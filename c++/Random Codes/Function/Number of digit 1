Problem:   Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.

CODE:

#include <bits/stdc++.h>
using namespace std;
int fact(int n){
    if (n==0) return 1;
    return n*fact(n-1);
}
int nCr(int n,int r){
    if(n>=r){
    return (fact(n)/(fact(r)*fact(n-r)));
    }
    else return 0;
}
int comb1(int n,int t){
    int sum=0;
    for(int r=1;r<=n;r++){
        sum+=nCr(n,r)*pow(9,(n-r))*(r);
    }
    return (t*sum);
}
int comb2(int n){
    int sum=0;
    for(int r=0;r<=n;r++){
        sum+=nCr(n,r)*pow(9,(n-r))*(r+1);
    }
    return sum;
}
int correct(int t,int n,int arr[]){
    int sum=0;
    for(int i=t+1;i<n;i++){
        sum=10*sum+arr[i];
    }
    return (sum+1);
}
int main() {
	int num;
	cin>>num;
	int a=num;
	int n=0;
	while(a>0){
	    n++;
	    a/=10;
	}
	int arr[n];
	int b=num;
	for(int i=0;i<n;i++){
	    int digit=b%10;
	    arr[n-i-1]=digit;
	    b/=10;
	}
	int ans=0;
	for(int i=0;i<n;i++){
	    if(arr[i]>=2){
	        int t=arr[i]-1;
	        ans+=comb1((n-i-1),t);
	        ans+=comb2(n-i-1);
	    }
	    else if(arr[i]==1){
	        ans+=comb1((n-i-1),1);
	        ans+=correct(i,n,arr);
	    }
	}
	cout<<ans;
	
}



Easy Leetcode Solution(Not Written By me):


#include <bits/stdc++.h>
using namespace std;
int countDigitOne(int n) {
    int ones = 0;
    for (long long m = 1; m <= n; m *= 10)
        ones += (n/m + 8) / 10 * m + (n/m % 10 == 1) * (n%m + 1);
    return ones;
}
int main() {
	int n;
	cin>>n;
	cout<<countDigitOne(n);


}

